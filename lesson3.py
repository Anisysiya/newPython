# –§—É–Ω–∫—Ü–∏—è ‚Äî —ç—Ç–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ

# def function_name(x):
# body line 1
# ...
# body line n
# optional return

# –ó–∞–¥–∞–Ω–∏–µ: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é sumNumbers(n), –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å
# —Å—É–º–º—É –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ—Ç 1 –¥–æ n.
# –†–µ—à–µ–Ω–∏–µ:
# 1. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é:
# def sumNumbers(n):

# 2. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
# def sumNumbers(n):
# summa = 0
# for i in range(1, n + 1):
# summa += i
# print(summa)

# 3. –°–ø—Ä–æ—Å–∏–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–∏—Å–ª–æ
# def sumNumbers(n):
# summa = 0
# for i in range(1, n + 1):
# summa += i
# print(summa)
# n = int(input()) # 5
# sumNumbers(n) # 15

#  —á—Ç–æ –¥–µ–ª–∞–µ—Ç return:
# 1. –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Ñ—É–Ω–∫—Ü–∏–∏
# 2. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ
# def sumNumbers(n):
# summa = 0
# for i in range(1, n + 1):
# summa += i
# return summa
# n = int(input()) # 5
# print(sumNumbers(n)) # 15

# 1. function_file.py (–ù–æ–≤—ã–π Python —Ñ–∞–π–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è f(x))
# def f(x):
# if x == 1:
# return '–¶–µ–ª–æ–µ'
# elif x == 2.3:
# return 23
# return # –≤—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏

# 2. working_file.py
# import function_file
# print(function_file.f(1)) # –¶–µ–ª–æ–µ
# print(function_file.f(2.3)) # 23
# print(function_file.f(28)) # None

# –í Python –º–æ–∂–Ω–æ –ø–µ—Ä–µ–º–Ω–æ–∂–∞—Ç—å —Å—Ç—Ä–æ–∫—É –Ω–∞ —á–∏—Å–ª–æ.
# def new_string(symbol, count):
# return symbol * count
# print(new_string('!', 5)) # !!!!!
# print(new_string('!')) # TypeError missing 1 required ...

# def new_string(symbol, count=3):
# return symbol * count
# print(new_string('!', 5)) # !!!!!
# print(new_string('!')) # !!!
# print(new_string(4)) # 12

# –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
# ‚óè –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–∏.
# ‚óè –ü–µ—Ä–µ–¥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –Ω–∞–¥–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å *.
# def concatenatio(*params):
# res = ""
# for item in params:
# res += item
# return res
# print(concatenatio('a', 's', 'd', 'w')) # asdw
# print(concatenatio('a', '1')) # a1
# # print(concatenatio(1, 2, 3, 4)) # TypeError: ...

# üí° –†–µ–∫—É—Ä—Å–∏—è ‚Äî —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞—é—â–∞—è —Å–∞–º–∞ —Å–µ–±—è
# –ü—Ä–∏ –æ–ø–∏—Å–∞–Ω–∏–∏ —Ä–µ–∫—É—Ä—Å–∏–∏ –≤–∞–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å, –∫–æ–≥–¥–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞–¥–æ
# –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –∏ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –≤—ã–∑—ã–≤–∞—Ç—å —Å–∞–º—É —Å–µ–±—è. –ü–æ-–¥—Ä—É–≥–æ–º—É –≥–æ–≤–æ—Ä—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
# —É–∫–∞–∑–∞—Ç—å –±–∞–∑–∏—Å —Ä–µ–∫—É—Ä—Å–∏–∏
# def fib(n):
# if n in [1, 2]:
# return 1
# return fib(n - 1) + fib(n - 2)
# list_1 = []
# for i in range(1, 10):
# list_1.append(fib(i - 2))
# print(list_1) # [1, 1, 2, 3, 5, 8, 13, 21, 34]

# –ê–ª–≥–æ—Ä–∏—Ç–º–æ–º –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ–∫–æ—Ç–æ—Ä–æ–π –∑–∞–¥–∞—á–∏. –í
# –ø—Ä–∏–Ω—Ü–∏–ø–µ, –ª—é–±–æ–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –∫–æ–¥–∞ –º–æ–∂–Ω–æ –Ω–∞–∑–≤–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º, –Ω–æ –º—ã —Å
# –í–∞–º–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º 2 —Å–∞–º—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–æ–∫:
# ‚óè –ë—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
# ‚óè –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–∏—è–Ω–∏–µ–º

# –ë—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
# ‚Äú–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ —Ä–∞–∑–±–∏–µ–Ω–∏–µ —á–µ–≥–æ-—Ç–æ –±–æ–ª—å—à–æ–≥–æ –∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –Ω–∞ —á—Ç–æ-—Ç–æ
# –º–∞–ª–µ–Ω—å–∫–æ–µ –∏ –≤–ø–æ–ª–Ω–µ —Ä–µ–∞–ª—å–Ω–æ–µ

# def quicksort(array):
# if len(array) < 2:
# return array
# else:
# pivot = array[0]
# less = [i for i in array[1:] if i <= pivot]
# greater = [i for i in array[1:] if i > pivot]
# return quicksort(less) + [pivot] + quicksort(greater)
# print(quicksort([10, 5, 2, 3]))

# ‚óè 1-–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Ä–µ–∫—É—Ä—Å–∏–∏:
# ‚óã array = [10, 5, 2, 3]
# ‚óã pivot = 10
# ‚óã less = [5, 2, 3]
# ‚óã greater = []
# ‚óã return quicksort([5, 2, 3]) + [10] + quicksort([])
# ‚óè 2-–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Ä–µ–∫—É—Ä—Å–∏–∏:
# ‚óã array = [5, 2, 3]
# ‚óã pivot = 5
# ‚óã less = [2, 3]
# ‚óã greater = []
# ‚óã return quicksort([2, 3]) + [5] + quicksort([]) # –í–∞–∂–Ω–æ! –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ, —á—Ç–æ
# –∑–¥–µ—Å—å –ø–æ–º–∏–º–æ –≤—ã–∑–æ–≤–∞ —Ä–µ–∫—É—Ä—Å–∏–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ [10]
# ‚óè 3-–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Ä–µ–∫—É—Ä—Å–∏–∏:
# ‚óã array = [2, 3]
# ‚óã return [2, 3] # –°—Ä–∞–±–æ—Ç–∞–ª –±–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π —Ä–µ–∫—É—Ä—Å–∏–∏
# –ù–∞ —ç—Ç–æ–º —Ä–∞–±–æ—Ç–∞ —Ä–µ–∫—É—Ä—Å–∏–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –∏ –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫–∏–º
# –æ–±—Ä–∞–∑–æ–º: [2, 3] + [5] + [10] = [2, 3, 5, 10]

# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–∏—è–Ω–∏–µ–º

# def merge_sort(nums):
# if len(nums) > 1:
# mid = len(nums) // 2
# left = nums[:mid]
# right = nums[mid:]
# merge_sort(left)
# merge_sort(right)
# i = j = k = 0
# while i < len(left) and j < len(right):
# if left[i] < right[j]:
# nums[k] = left[i]
# i += 1
# else:
# nums[k] = right[j]
# j += 1
# k += 1
# while i < len(left):
# nums[k] = left[i]
# i += 1
# k += 1
# while j < len(right):
# nums[k] = right[j]
# j += 1
# k += 1
# 11
# nums = [38, 27, 43, 3, 9, 82, 10]
# merge_sort(nums)
# print(nums)
